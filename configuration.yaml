# Add the contents of this file to your Home Assistant configuration.yaml
# This file isn't a valid configuration file!

modbus: !include modbus.yaml


template:
  - sensor:
      - name: "Solar Production"
        unit_of_measurement: "W"
        state_class: measurement
        device_class: power
        state: >
          {% set pv1 = states('sensor.pv1_power') | float %}
          {% set pv2 = states('sensor.pv2_power') | float %}
          {{ float(pv1) + float(pv2) }}
        attributes:         
          last_reset: '2022-04-01T00:00:00+00:00' 
      - name: "Battery Discharge"
        unit_of_measurement: W
        state_class: measurement
        device_class: power
        state: >
          {% if states('sensor.battery_discharge_power')|float > 0 %}
            {{ 1 * states('sensor.battery_discharge_power') | float }}
          {% else %}
            0
          {% endif %}
        attributes:         
          last_reset: '2022-04-01T00:00:00+00:00' 
      - name: "Battery Charge"
        unit_of_measurement: W
        state_class: measurement
        device_class: power
        state: >
          {% if states('sensor.battery_discharge_power')|float < 0 %}
            {{ -1 * states('sensor.battery_discharge_power') | float }}
          {% else %}
            0
          {% endif %}
        attributes:         
          last_reset: '2022-04-01T00:00:00+00:00'   
    

# Utility Meters - not required, may be useful
utility_meter:
    daily_pv1_sum:
        source: sensor.pv1_sum
        cycle: daily
    monthly_pv1_sum:
        source: sensor.pv1_sum
        cycle: monthly
    yearly_pv1_sum:
        source: sensor.pv1_sum
        cycle: yearly
        
template:
  - sensor:
      name: "Solar Power Daily"
      unit_of_measurement: "kWh"
      state: "{{ states('sensor.daily_pv1_sum') | float }}"
  - sensor:
      name: "Solar Power Now"
      unit_of_measurement: "kW"
      state: "{{ states('sensor.foxess_pv1_power') | float  }}"
  - sensor:
      name: "Solar Power Monthly"
      unit_of_measurement: "kWh"
      state: "{{ states('sensor.monthly_pv1_sum') | float }}"
  - sensor:
      name: "Solar Power Yearly"
      unit_of_measurement: "kWh"
      state: "{{ states('sensor.yearly_pv1_sum') | float }}"
  - sensor:
      name: "Solar Power Total"
      unit_of_measurement: "kWh"
      state: "{{ states('sensor.total_pv1_sum') | float }}"
              

# These sensors are used in the HA Energy dashboard
sensor:   
  - platform: integration
    name: "Solar Energy"
    source: sensor.pv1_power
    unit_time: h
    round: 2
  - platform: integration
    name: "Battery Discharge Amount"
    source: sensor.battery_discharge
    unit_time: h
    round: 2
    method: left
  - platform: integration
    name: "Battery Charge Amount"
    source: sensor.battery_charge
    unit_time: h
    round: 2
    method: left  

## Setup Better Solar Tracking Sensors that resolve negative solar tracking  
  - platform: integration
    source: sensor.foxess_pv1_power
    name: pv1_sum
    unit_time: h
    round: 2
    
## Setup additional sensors for current load, average load and baseloadload      
  - platform: template
    sensors:
      battery_hrs_average:
        friendly_name: "Battery life based on average load"
        value_template: >
          {% if (states('sensor.foxess_bat_soc') in ['unknown', 'unavailable'])%}
          {{ states('sensor.battery_hrs_average') }}
          {% else %}
          {{ ((states('sensor.foxess_bat_soc') | float - 10) / 100 * 18.2 / 11 * 24) | round(1) }}
          {% endif %}
        unit_of_measurement: "hours"
      battery_hrs_instant:
        friendly_name: "Battery life based on current load"
        value_template: >
          {% if (states('sensor.foxess_bat_soc') in ['unknown', 'unavailable'])%}
          {{ states('sensor.battery_hrs_instant') }}
          {% else %}
          {{ ((states('sensor.foxess_bat_soc') | float - 10) / 100 * 18.2 / states('sensor.foxess_load_power') | float) | round(1) }}
          {% endif %}
        unit_of_measurement: "hours"
      battery_energy:
        friendly_name: "Battery stored energy"
        value_template: >
          {% if (states('sensor.foxess_bat_soc') in ['unknown', 'unavailable'])%}
          {{ states('sensor.battery_energy') }}
          {% else %}
          {{ ((states('sensor.foxess_bat_soc') | float) / 100 * 18.2) | round(1) }}
          {% endif %}
        unit_of_measurement: "kWh"
      battery_hrs_baseload:
        friendly_name: "Battery life based on baseload"
        value_template: >
          {% if (states('sensor.foxess_bat_soc') in ['unknown', 'unavailable'])%}
          {{ states('sensor.battery_hrs_instant') }}
          {% else %}
          {{ ((states('sensor.foxess_bat_soc') | float - 10) / 100 * 18.2 / 0.5 | float) | round(1) }}
          {% endif %}
        unit_of_measurement: "hours"

## Export earnings sensor  
  - platform: template
    sensors:
      export_monetized:
        friendly_name: "Export earning"
        value_template: "{{ (((states('sensor.foxess_feedin') | float | round(2))) * 0.04) }}"
        unit_of_measurement: 'Â£'
        
  - platform: integration
    source: sensor.foxess_feedin
    name: feedin_sum
    unit_time: h
    round: 2
    
    
